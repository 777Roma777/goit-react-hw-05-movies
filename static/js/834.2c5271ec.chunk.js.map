{"version":3,"file":"static/js/834.2c5271ec.chunk.js","mappings":"qLAEaA,E,OAAQC,GAAAA,EAAH,gL,SCALC,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC5B,OAAO,UAACH,EAAD,WAAO,+BAA2B,4BAAM,IAAEG,EAAQ,SAC1D,C,oFCFYC,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,EAAYC,MAAMC,QAAQH,IAAWA,EAAOI,OAC5CC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGL,GACCD,EAAOO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,EAAcC,YAAd,OACT,eAAIC,UAAU,aAAd,UACE,SAAC,KAAD,CAAMA,UAAU,aAAaC,MAAO,CAAEC,KAAMR,GAAYS,GAAE,kBAAaN,GAAvE,UAUE,cAAGG,UAAU,QAAb,SAAsBF,OAXMD,EADvB,KAkBlB,C,iKCZD,EAdkB,SAAC,GAAsB,IAApBO,EAAmB,EAAnBA,aACnB,OACE,kBAAMC,SAAUD,EAAhB,WACE,kBACEE,KAAK,OACLC,KAAK,cACLC,aAAa,MACbC,WAAS,EACTC,YAAY,6BAEd,mBAAQJ,KAAK,SAAb,SAAsB,aAG3B,E,QCwCD,EA7Ce,WACb,OAAwCK,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4CC,EAAAA,EAAAA,UAAS,MAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAQT,EAAaU,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAgB,mCAAG,sGAErBN,GAAa,GAFQ,UAGKO,EAAAA,EAAAA,IAAWJ,GAHhB,gBAGbK,EAHa,EAGbA,QACRV,EAAkBU,GAJG,gDAMrBN,EAAS,KAAMjC,SANM,yBAQrB+B,GAAa,GARQ,4EAAH,qDAWtBM,GAZkB,CAanB,GAAE,CAACH,IAaJ,OACE,4BACE,SAAC,EAAD,CAAWjB,aAbE,SAAAuB,GACfA,EAAIC,iBACJ,IAAMC,EAAaF,EAAIG,cAAcC,YAAYC,MAAMC,OACvD,IAAKJ,EACH,OAAOK,MAAM,+BAEfrB,EAAgB,CAAEQ,MAAOQ,IAEzBF,EAAIG,cAAcK,OACnB,IAKIlB,IAAa,SAAC,IAAD,IACbE,IAAS,SAAC,IAAD,IACTJ,IAAkB,SAAC,IAAD,CAAY1B,OAAQ0B,MAG5C,C,+ICjDDqB,EAAAA,EAAAA,SAAAA,OAAwB,CACpBC,QAAS,oCAGN,IAAMC,EAAU,mCAAG,sGACDF,EAAAA,EAAAA,IAAU,mDADT,uBAChBG,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,qDAKVd,EAAU,mCAAG,WAAMJ,GAAN,yFACHe,EAAAA,EAAAA,IAAA,0DAA6Df,IAD1D,uBACjBkB,EADiB,EACjBA,KADiB,kBAEjBA,GAFiB,2CAAH,sDAKVC,EAAY,mCAAG,WAAOC,GAAP,yFACLL,EAAAA,EAAAA,IAAA,6CAAgDK,IAD3C,uBACnBF,EADmB,EACnBA,KADmB,kBAEnBA,GAFmB,2CAAH,qD","sources":["components/ErrorMessage/errorMessage.styled.js","components/ErrorMessage/errorMessage.jsx","components/MoviesList/moviesList.jsx","components/SearchBar/searchBar.jsx","path/movies.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Error = styled.p`\n  margin-top: 100px;\n  text-align: center;\n  color: red;\n  font-size: 26px;\n  font-weight: 500;\n\n  span{\ncolor: #010101;\nfont-size: 20px;\n  }\n`","import { Error } from \"./errorMessage.styled\";\n\nexport const ErrorMessage = ({message}) => {\n  return <Error>Oops! Something does wrong!<span>({message})</span></Error>;\n}","import { Link, useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ movies }) => {\n  const getMovies = Array.isArray(movies) && movies.length;\n  const location = useLocation();\n  return (\n    <ul>\n      {getMovies &&\n        movies.map(({ id, title, poster_path }) => (\n          <li className=\"movie-item\" key={id}>\n            <Link className=\"movie-link\" state={{ from: location }} to={`/movies/${id}`}>\n              {/* <img className=\"movie-img\"\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                    : defaultImg\n                }\n                width={250}\n                alt=\"poster\"\n              /> */}\n              <p className=\"title\">{title}</p>\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n};","const SearchBar = ({ handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"searchInput\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search films by keyword\"\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\nexport default SearchBar;\n","import React, { useEffect, useState } from 'react';\nimport { fetchMovie } from 'services/api';\nimport Loader from 'components/Loader/loader';\nimport { ErrorMessage } from 'components/ErrorMessage/errorMessage';\nimport { MoviesList } from 'components/MoviesList/moviesList';\nimport SearchBar from 'components/SearchBar/searchBar';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchedMovies, setSearchedMovies] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n    const fetchMovieSearch = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await fetchMovie(query);\n        setSearchedMovies(results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieSearch();\n  }, [query]);\n\n  const onSubmit = evt => {\n    evt.preventDefault();\n    const searchWord = evt.currentTarget.searchInput.value.trim();\n    if (!searchWord) {\n      return alert('Please, enter your keyword!');\n    }\n    setSearchParams({ query: searchWord });\n\n    evt.currentTarget.reset();\n  };\n\n  return (\n    <div>\n      <SearchBar handleSubmit={onSubmit} />\n      {isLoading && <Loader />}\n      {error && <ErrorMessage />}\n      {searchedMovies && <MoviesList movies={searchedMovies} />}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.params = {\n    api_key: '0c1e89b9ded609b03f6b23eba7068d6d',\n}\n\nexport const fetchFilms = async () => {\n  const { data } = await axios.get('https://api.themoviedb.org/3/trending/movie/day');\n  return data;\n};\n\nexport const fetchMovie = async(query) => {\n  const {data} = await axios.get(`https://api.themoviedb.org/3/search/movie?query=${query}`);\n  return data;\n}\n\nexport const fetchDetails = async (movieId) => {\n  const {data} = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}`);\n  return data;\n} \n\nexport const fetchCast = async (movieId) => {\n  const {data} = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits`);\n  return data;\n} \n\nexport const fetchReviews = async (movieId) => {\n  const {data} = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews`);\n  return data;\n} "],"names":["Error","styled","ErrorMessage","message","MoviesList","movies","getMovies","Array","isArray","length","location","useLocation","map","id","title","poster_path","className","state","from","to","handleSubmit","onSubmit","type","name","autoComplete","autoFocus","placeholder","useSearchParams","searchParams","setSearchParams","useState","searchedMovies","setSearchedMovies","isLoading","setIsLoading","error","setError","query","get","useEffect","fetchMovieSearch","fetchMovie","results","evt","preventDefault","searchWord","currentTarget","searchInput","value","trim","alert","reset","axios","api_key","fetchFilms","data","fetchDetails","movieId"],"sourceRoot":""}